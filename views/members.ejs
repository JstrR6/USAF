<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>USM Members</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(45deg, #612ccd 0%, #541170 99%, #8902ff 100%);
            min-height: 100vh;
            padding: 2rem;
        }

        .members-container {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 2rem;
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }

        .nav-menu {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .nav-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            color: white;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .filters-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
            background: rgba(255, 255, 255, 0.1);
            padding: 1rem;
            border-radius: 10px;
        }

        .filter-input {
            padding: 0.75rem;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.1);
            color: black;
        }

        .members-grid {
            display: grid;
            gap: 1rem;
        }

        .member-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 1.5rem;
            color: black;
        }

        .member-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .member-details div {
            margin-bottom: 0.5rem;
        }

        .member-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #4299e1;
            color: white;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            background: white;
            margin: 10% auto;
            padding: 2rem;
            width: 90%;
            max-width: 600px;
            border-radius: 10px;
            position: relative;
        }

        .close-btn {
            position: absolute;
            right: 1rem;
            top: 1rem;
            cursor: pointer;
        }

        .note {
            background: rgba(255, 255, 255, 0.1);
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 5px;
        }

        .note-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            color: rgba(0, 0, 0, 0.6);
        }

        .pagination {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 2rem;
        }

        .page-btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            cursor: pointer;
        }

        .page-btn.active {
            background: #4299e1;
        }
    </style>
</head>
<body>
    <div class="members-container">
        <nav class="nav-menu">
            <a href="/dashboard" class="nav-item">Dashboard</a>
            <a href="/members" class="nav-item">Members</a>
            <a href="/forms" class="nav-item">Forms</a>
            <a href="/profile" class="nav-item">Profile</a>
        </nav>

        <div class="filters-container">
            <input type="text" id="usernameFilter" placeholder="Search by username" class="filter-input">
            <select id="rankFilter" class="filter-input">
                <option value="">All Ranks</option>
                <option value="asc">Rank (Lowest to Highest)</option>
                <option value="desc">Rank (Highest to Lowest)</option>
                <!-- Populated with actual ranks -->
            </select>
            <select id="specificRankFilter" class="filter-input">
                <option value="">Select Specific Rank</option>
                <!-- Populated with all ranks -->
            </select>
            <select id="placementFilter" class="filter-input">
                <option value="">All Placements</option>
                <!-- Populated with all placements -->
            </select>
            <select id="statusFilter" class="filter-input">
                <option value="">All Statuses</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
            </select>
        </div>

        <div class="members-grid">
            <% members.forEach(member => { %>
                <div class="member-card">
                    <div class="member-info">
                        <div class="member-details">
                            <div><strong>Username:</strong> <%= member.username %></div>
                            <div><strong>Rank:</strong> <%= member.highestRole %></div>
                            <div><strong>Placement:</strong> <%= member.placement || 'Not Assigned' %></div>
                            <div><strong>XP:</strong> <%= member.xp %></div>
                        </div>
                        <% if (isOfficer) { %>
                            <div class="member-actions">
                                <button class="action-btn" onclick="viewNotes('<%= member.username %>')">
                                    Notes
                                </button>
                            </div>
                        <% } %>
                    </div>
                </div>
            <% }); %>
        </div>

        <div class="pagination">
            <% for(let i = 1; i <= totalPages; i++) { %>
                <button class="page-btn <%= currentPage === i ? 'active' : '' %>" 
                        onclick="changePage(<%= i %>)">
                    <%= i %>
                </button>
            <% } %>
        </div>
    </div>

    <!-- Notes Modal -->
    <div id="notesModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal()">&times;</span>
            <h2>User Notes</h2>
            <div id="notesContainer"></div>
            <div class="add-note-form">
                <h3>Add New Note</h3>
                <select id="noteType" class="filter-input">
                    <option value="General">General</option>
                    <option value="Warning">Warning</option>
                    <option value="Training">Training</option>
                    <option value="Recommendation">Recommendation</option>
                </select>
                <textarea id="noteContent" class="filter-input" placeholder="Enter note content"></textarea>
                <button class="action-btn" onclick="addNote()">Add Note</button>
            </div>
        </div>
    </div>

    <script>
        let currentUsername = '';

        async function viewNotes(username) {
            currentUsername = username;
            const modal = document.getElementById('notesModal');
            const container = document.getElementById('notesContainer');
            
            try {
                const response = await fetch(`/members/notes/${username}`);
                const data = await response.json();
                
                container.innerHTML = data.notes.map(note => `
                    <div class="note">
                        <div class="note-header">
                            <span>${note.noteType}</span>
                            <span>By ${note.addedBy} on ${new Date(note.dateAdded).toLocaleDateString()}</span>
                        </div>
                        <div class="note-content">${note.content}</div>
                    </div>
                `).join('');
                
                modal.style.display = 'block';
            } catch (error) {
                console.error('Error fetching notes:', error);
            }
        }

        async function addNote() {
            const type = document.getElementById('noteType').value;
            const content = document.getElementById('noteContent').value;
            
            try {
                const response = await fetch('/members/notes/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        username: currentUsername,
                        noteType: type,
                        content: content
                    })
                });
                
                if (response.ok) {
                    document.getElementById('noteContent').value = '';
                    viewNotes(currentUsername);
                }
            } catch (error) {
                console.error('Error adding note:', error);
            }
        }

        function closeModal() {
            document.getElementById('notesModal').style.display = 'none';
        }

        // Filter functionality
        const filters = document.querySelectorAll('.filter-input');
        filters.forEach(filter => {
            filter.addEventListener('change', applyFilters);
        });

        document.getElementById('usernameFilter').addEventListener('input', applyFilters);

        async function applyFilters() {
            const username = document.getElementById('usernameFilter').value;
            const rank = document.getElementById('rankFilter').value;
            const specificRank = document.getElementById('specificRankFilter').value;
            const placement = document.getElementById('placementFilter').value;
            const status = document.getElementById('statusFilter').value;

            try {
                const response = await fetch(`/members/filter?username=${username}&rank=${rank}&specificRank=${specificRank}&placement=${placement}&status=${status}`);
                const data = await response.json();
                updateMembersDisplay(data.members);
            } catch (error) {
                console.error('Error applying filters:', error);
            }
        }

        function updateMembersDisplay(members) {
            const grid = document.querySelector('.members-grid');
            grid.innerHTML = members.map(member => `
                <div class="member-card">
                    <div class="member-info">
                        <div class="member-details">
                            <div><strong>Username:</strong> ${member.username}</div>
                            <div><strong>Rank:</strong> ${member.highestRole}</div>
                            <div><strong>Placement:</strong> ${member.placement || 'Not Assigned'}</div>
                            <div><strong>XP:</strong> ${member.xp}</div>
                        </div>
                        ${isOfficer ? `
                            <div class="member-actions">
                                <button class="action-btn" onclick="viewNotes('${member.username}')">
                                    Notes
                                </button>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `).join('');
        }
    </script>
</body>
</html>